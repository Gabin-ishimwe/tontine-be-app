generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model Users {
  id           String       @id @default(uuid())
  username     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  // pool      Pools            @relation(fields: [poolId], references: [id])
  // poolId    String
  membership      PoolMembership[]
  createdPools Pools[]
}

// Pool Model
model Pools {
  id                   String        @id @default(uuid())
  title                String        @unique
  description          String
  category             String
  amountPerSprint      Int
  sprintTime           Int // contribution time
  sprintTimeType       String
  cycleTime            String? // Withdrawal time
  cycleTimeType        String?
  numberOfParticipants Int           @default(3)
  expectedTimeStart    DateTime? // time to start the pool
  inviteCode           Int? // invite code to join pool
  isActive             Boolean       @default(false)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  wallet               Wallets?
  // members              Users[] // accepted members
  poolMembers          PoolMembership[]
  createdByUser        Users         @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdBy            String

  @@index([id, title])
}

// Wallet Model
model Wallets {
  accountNumber String   @id @unique @default(uuid())
  isActive      Boolean  @default(false)
  amount        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  pool          Pools    @relation(fields: [poolId], references: [id], onDelete: Cascade)
  poolId        String   @unique

  @@index([accountNumber])
}

// PoolMembers Model
model PoolMembership {
  id       String        @id @unique @default(uuid())
  status   InvitedStatus @default(PENDING)
  member   Users         @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String        @unique
  pool     Pools         @relation(fields: [poolId], references: [id], onDelete: Cascade)
  poolId   String
}

enum InvitedStatus {
  PENDING
  ACCEPTED
  REJECTED
}
